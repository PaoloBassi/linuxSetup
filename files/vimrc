set encoding=UTF-8

set number

set nocompatible

set mouse=a

set background=dark

syntax enable

syntax on

set hlsearch

set expandtab

set tabstop=4

set shiftwidth=4

set softtabstop=4

set showmatch

set incsearch

set autoindent
set smartindent

set rnu

set hidden

filetype on
filetype plugin on
filetype indent on

" When vim is opened, open NERDTree
" autocmd VimEnter * NERDTree | wincmd p

" Select the file in the NERDTree when it is opened
autocmd BufWinEnter * if &buftype != 'quickfix' && getcmdwintype() == '' | silent NERDTreeMirror | endif

" Load the plugins when entering vim
if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" Search for a file using Ag
map <S-f> :Files<CR>
" Split the screen and search for a file using Ag
map <C-Left> :vnew<CR>:Files<CR>
map <C-Up> :new<CR>:Files<CR>
" Toggle NERDTree using Space
nmap <Space> :NERDTreeToggle<CR>

" Move between splits using Ctrl + h/j/k/l
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l

" Search for a word using Ctrl + f
nmap     <C-F>f <Plug>CtrlSFPrompt
vmap     <C-F>f <Plug>CtrlSFVwordPath

" After selecting a file in the search, focus on it when opened
let g:ctrlsf_auto_focus = {
    \ "at": "start"
    \ }

" Add the filename to the status line
let g:lightline = {
      \ 'component_function': {
      \   'filename': 'FilenameForLightline'
      \ }
      \ }

" Show full path of filename
function! FilenameForLightline()
    return expand('%')
endfunction

" Map a key to preview the markdown file
nmap <F4> :call PreviewMarkdown()<CR>clear<CR>glow $(cat ~/.lastpreview.log)<CR>

" Search option is compact, when expanded, do it on the right
let g:ctrlsf_default_view_mode = 'compact'
let g:ctrlsf_search_mode = 'async'
let g:ctrlsf_position = 'right'

" Airline theme
let g:airline_theme='base16_gruvbox_dark_hard'

" C++ better highlight
let g:cpp_class_scope_highlight = 1
let g:cpp_member_variable_highlight = 1
let g:cpp_class_decl_highlight = 1
let g:cpp_posix_standard = 1

" C++ ALE options
let g:ale_pattern_options_enabled = 1
let g:ale_linters_explicit = 1
let opts = '-std=c++17 -Wall -Wextra --compile-commands-dir=./build-Debug'
let g:ale_pattern_options = {
\   '\.h$':   { 'ale_linters': { 'cpp': ['clangd', 'cppcheck', 'clangtidy'] } },
\   '\.c$':   { 'ale_linters': { 'cpp': ['clangd', 'cppcheck', 'clangtidy'] } },
\   '\.cpp$': { 'ale_linters': { 'cpp': ['clangd', 'cppcheck', 'clangtidy'] } },
\   '\.hpp$': { 'ale_linters': { 'cpp': ['clangd', 'cppcheck', 'clangtidy'] } },
\}
let g:ale_linters = { 'cpp': ['clangd', 'cppcheck', 'clangtidy'] }
let g:ale_cpp_cc_options    = opts
let g:ale_cpp_gcc_options   = opts
let g:ale_cpp_clang_options = opts
let g:ale_cpp_clangd_options = opts
let g:ale_cpp_clangtidy_options = opts
let g:ale_fix_on_save = 1
let g:ale_lint_on_enter = 1
let g:ale_lint_on_save = 1

" workspace plugin
let g:workspace_autocreate = 1
let g:workspace_session_directory = expand('$HOME/.vim/workspace')
let g:workspace_undodir = expand('$HOME/.vim/workspace/.undodir')

if !isdirectory(g:workspace_undodir)
    call mkdir(g:workspace_undodir, 'p')
endif

set undofile
set undodir^=~/.vim/workspace/.undodir

" Default view method for vimtex
let g:vimtex_view_method = 'zathura'

" Apply Ctags to the project when it is modified
autocmd BufWritePost *.c,*.h,*.cpp,*.hpp silent! !ctags -R . &

" Swap between header and source
map <Esc>o <A-o>
nnoremap <A-o> :call CurtineIncSw()<CR>

" Call the search for the inner word under the cursor
nnoremap <C-p> viw<Plug>CtrlSFVwordPath

" Tab commands on shift + t/j/k/q
map <S-t> :tabnew<CR>
map <S-j> :tabnext<CR>
map <S-k> :tabprevious<CR>
map <S-q> :tabclose<CR>

" hightlight all the words similar to the one under the cursor
augroup hightlight_current_word
  au!
  au CursorHold * :exec 'match Search /\V\<' . expand ('<cword>') . '\>/'
augroup END

" Split directions
set splitright
set splitbelow

" Command functions to search and open buffers using fzf
command! Buffers call fzf#run(fzf#wrap('buffers', {
      \ 'source': map(filter(range(1, bufnr('$')), 'buflisted(v:val)'), 'bufname(v:val)'),
      \ 'sink':   'edit'
      \ }))

command! BuffersSplit call fzf#run(fzf#wrap('buffers', {
      \ 'source': map(filter(range(1, bufnr('$')), 'buflisted(v:val)'), 'bufname(v:val)'),
      \ 'sink':   { buf -> execute('split ' . buf) }
      \ }))

command! BuffersVSplit call fzf#run(fzf#wrap('buffers', {
      \ 'source': map(filter(range(1, bufnr('$')), 'buflisted(v:val)'), 'bufname(v:val)'),
      \ 'sink':   { buf -> execute('vsplit ' . buf) }
      \ }))

" Remap calls to open buffers
nnoremap <leader>be :Buffers<CR>
nnoremap <leader>bs :BuffersSplit<CR>
nnoremap <leader>bv :BuffersVSplit<CR>

" Source the plugins in the plugins.vim file
so ~/.vim/plugins.vim

" Load the color scheme and their settings at the end of the file to allow the
" plugins to load first
colorscheme fahrenheit

" set the highlight color of a search
highlight Search cterm=bold,italic,underline ctermbg=NONE ctermfg=lightblue

" set the highlight color of various components
highlight String ctermfg=109
highlight cCustomClass ctermfg=214
highlight cCustomClassName ctermfg=214

" set the update time to 300ms
set updatetime=300
