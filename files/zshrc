# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH=/home/$(whoami)/.oh-my-zsh

# Set name of the theme to load. Optionally, if you set this to "random"
# it'll load a random theme each time that oh-my-zsh is loaded.
# See https://github.com/robbyrussell/oh-my-zsh/wiki/Themes
ZSH_THEME='kimwz'

# Set list of themes to load
# Setting this variable when ZSH_THEME='kimwz'
# cause zsh load theme from this variable instead of
# looking in ~/.oh-my-zsh/themes/
# An empty array have no effect
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion. Case
# sensitive completion must be off. _ and - will be interchangeable.
HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# The optional three formats: "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=( colored-man-pages cp
)

source $ZSH/oh-my-zsh.sh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# ssh
# export SSH_KEY_PATH="~/.ssh/rsa_id"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"
# my alias definition
alias ..='cd ..'
alias ...='cd ..; cd ..'
alias ....='cd ..; cd ..; cd ..'
alias .....='cd ..; cd ..; cd ..; cd ..'
alias shut='sudo shutdown -h now'
alias rm='rm -i'
alias cp='cp -i'
alias mv='mv -i'
alias mkdir='mkdir -p'
alias reboot='sudo reboot'
alias update='sudo apt update'
alias install='sudo apt install'
alias upgrade='sudo apt upgrade'
alias autoremove='sudo apt autoremove'
alias remove='sudo apt remove'
alias root='sudo -i'
alias su='sudo -i'
alias op='xdg-open'
alias here='op $(pwd)'
alias bashrc='vim ~/.bashrc'
alias zshrc='vim ~/.zshrc'
alias h='history'
alias path='echo -e ${PATH//:/\\n}'
alias du='du -kh'
alias df='df -kTh'
alias tree='tree -Csuh'
alias ps='ps -ef'
alias c='xclip -selection clipboard'

# git aliases
alias s='git status'
alias push="git push"
alias pull="git pull --rebase origin"
alias br="git branch -va"

# ls aliases
alias ls='ls -lh --color --group-directories-first'
alias l='ls -CF'
alias la='ls -la'
alias cat='batcat --style=numbers --color=always --theme="gruvbox-dark"'

# functions
# ff function augmented with batcat that opens the file in vim
ff() {
  local selected
  selected=$(fzf --reverse --inline-info --preview 'batcat --style=numbers --color=always --theme="gruvbox-dark" {}' \
    --bind 'enter:accept,ctrl-j:down,ctrl-k:up,alt-j:preview-down,alt-k:preview-up')

  [ -z "$selected" ] && return

  vim "$selected"
}

# call ag with fzf, a nice preview and open the file in vim
ag() {
  local selected file line
  selected=$(/usr/bin/ag --nobreak --noheading . | fzf --reverse --inline-info \
    --preview 'batcat --style=numbers --color=always --theme="gruvbox-dark" "$(cut -d: -f1 <<< {})"' \
    --bind 'enter:accept,ctrl-j:down,ctrl-k:up,alt-j:preview-down,alt-k:preview-up')

  [ -z "$selected" ] && return

  file=$(echo "$selected" | cut -d: -f1)
  line=$(echo "$selected" | cut -d: -f2)
  vim +"$line" "$file"
}

# git diff with fzf
diff() {
  local selected file line
  selected=$(git diff --name-only | fzf --reverse --inline-info \
    --preview 'git diff $@ --color=always -- {-1}' \
    --bind 'enter:accept,ctrl-j:down,ctrl-k:up,alt-j:preview-down,alt-k:preview-up')

  [ -z "$selected" ] && return

  file=$(echo "$selected" | cut -d: -f1)
  vim "$file"
}

function extract()      # Handy Extract Program
{
    if [ -f $1 ] ; then
        case $1 in
            *.tar.bz2)   tar xvjf $1     ;;
            *.tar.gz)    tar xvzf $1     ;;
            *.bz2)       bunzip2 $1      ;;
            *.rar)       unrar x $1      ;;
            *.gz)        gunzip $1       ;;
            *.tar)       tar xvf $1      ;;
            *.tbz2)      tar xvjf $1     ;;
            *.tgz)       tar xvzf $1     ;;
            *.zip)       unzip $1        ;;
            *.Z)         uncompress $1   ;;
            *.7z)        7z x $1         ;;
            *)           echo "'$1' cannot be extracted via >extract<" ;;
        esac
    else
        echo "'$1' is not a valid file!"
    fi
}

# git log function augmented with graphs and changed code from the previous $1 commits
function log()
{
    if [ -z "$1" ];
    then
        git log --graph
    else
        git log --graph -p -$1
    fi
}

# git log augmented
function lg()
{
    git log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - by %C(bold red)%cn%C(reset) %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n''          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)' --all
}


# In order: 1 current dir 2 previous dir 3 home
CDPATH=:..:~

# set vi as the input for terminal
set -o vi
